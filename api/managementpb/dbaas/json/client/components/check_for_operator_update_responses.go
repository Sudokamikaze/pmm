// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckForOperatorUpdateReader is a Reader for the CheckForOperatorUpdate structure.
type CheckForOperatorUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckForOperatorUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckForOperatorUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCheckForOperatorUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCheckForOperatorUpdateOK creates a CheckForOperatorUpdateOK with default headers values
func NewCheckForOperatorUpdateOK() *CheckForOperatorUpdateOK {
	return &CheckForOperatorUpdateOK{}
}

/*CheckForOperatorUpdateOK handles this case with default header values.

A successful response.
*/
type CheckForOperatorUpdateOK struct {
	Payload *CheckForOperatorUpdateOKBody
}

func (o *CheckForOperatorUpdateOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Components/CheckForOperatorUpdate][%d] checkForOperatorUpdateOk  %+v", 200, o.Payload)
}

func (o *CheckForOperatorUpdateOK) GetPayload() *CheckForOperatorUpdateOKBody {
	return o.Payload
}

func (o *CheckForOperatorUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckForOperatorUpdateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckForOperatorUpdateDefault creates a CheckForOperatorUpdateDefault with default headers values
func NewCheckForOperatorUpdateDefault(code int) *CheckForOperatorUpdateDefault {
	return &CheckForOperatorUpdateDefault{
		_statusCode: code,
	}
}

/*CheckForOperatorUpdateDefault handles this case with default header values.

An unexpected error response.
*/
type CheckForOperatorUpdateDefault struct {
	_statusCode int

	Payload *CheckForOperatorUpdateDefaultBody
}

// Code gets the status code for the check for operator update default response
func (o *CheckForOperatorUpdateDefault) Code() int {
	return o._statusCode
}

func (o *CheckForOperatorUpdateDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/Components/CheckForOperatorUpdate][%d] CheckForOperatorUpdate default  %+v", o._statusCode, o.Payload)
}

func (o *CheckForOperatorUpdateDefault) GetPayload() *CheckForOperatorUpdateDefaultBody {
	return o.Payload
}

func (o *CheckForOperatorUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckForOperatorUpdateDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CheckForOperatorUpdateBody check for operator update body
swagger:model CheckForOperatorUpdateBody
*/
type CheckForOperatorUpdateBody struct {

	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`

	// operator_type tells what operator we are interested in for checking the update availability.
	OperatorType string `json:"operator_type,omitempty"`
}

// Validate validates this check for operator update body
func (o *CheckForOperatorUpdateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckForOperatorUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckForOperatorUpdateBody) UnmarshalBinary(b []byte) error {
	var res CheckForOperatorUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CheckForOperatorUpdateDefaultBody check for operator update default body
swagger:model CheckForOperatorUpdateDefaultBody
*/
type CheckForOperatorUpdateDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this check for operator update default body
func (o *CheckForOperatorUpdateDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckForOperatorUpdateDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CheckForOperatorUpdate default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckForOperatorUpdateDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckForOperatorUpdateDefaultBody) UnmarshalBinary(b []byte) error {
	var res CheckForOperatorUpdateDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CheckForOperatorUpdateOKBody check for operator update OK body
swagger:model CheckForOperatorUpdateOKBody
*/
type CheckForOperatorUpdateOKBody struct {

	// OperatorUpdateStatus represents status of an update for the operator.
	//
	//  - UPDATE_AVAILABLE: An update of the operator is available for the installed version of PMM server.
	//  - UPDATE_NOT_AVAILABLE: An update of the operator is not available for the installed version of PMM server.
	//  - UPDATE_AVAILABLE_BUT_NOT_COMPATIBLE: An update of the operator is available but for more up to date version of
	// PMM server than is currently installed.
	// Enum: [OPERATOR_UPDATE_STATUS_INVALID UPDATE_AVAILABLE UPDATE_NOT_AVAILABLE UPDATE_AVAILABLE_BUT_NOT_COMPATIBLE]
	Status *string `json:"status,omitempty"`

	// available_operator_version is not empty if there is an update available,
	// for both compatible and incompatible one.
	AvailableOperatorVersion string `json:"available_operator_version,omitempty"`

	// available_pmm_server_version is not empty only if the update is available but
	// the version of the operator is not compatible with installed PMM version.
	AvailablePMMServerVersion string `json:"available_pmm_server_version,omitempty"`
}

// Validate validates this check for operator update OK body
func (o *CheckForOperatorUpdateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var checkForOperatorUpdateOkBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPERATOR_UPDATE_STATUS_INVALID","UPDATE_AVAILABLE","UPDATE_NOT_AVAILABLE","UPDATE_AVAILABLE_BUT_NOT_COMPATIBLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkForOperatorUpdateOkBodyTypeStatusPropEnum = append(checkForOperatorUpdateOkBodyTypeStatusPropEnum, v)
	}
}

const (

	// CheckForOperatorUpdateOKBodyStatusOPERATORUPDATESTATUSINVALID captures enum value "OPERATOR_UPDATE_STATUS_INVALID"
	CheckForOperatorUpdateOKBodyStatusOPERATORUPDATESTATUSINVALID string = "OPERATOR_UPDATE_STATUS_INVALID"

	// CheckForOperatorUpdateOKBodyStatusUPDATEAVAILABLE captures enum value "UPDATE_AVAILABLE"
	CheckForOperatorUpdateOKBodyStatusUPDATEAVAILABLE string = "UPDATE_AVAILABLE"

	// CheckForOperatorUpdateOKBodyStatusUPDATENOTAVAILABLE captures enum value "UPDATE_NOT_AVAILABLE"
	CheckForOperatorUpdateOKBodyStatusUPDATENOTAVAILABLE string = "UPDATE_NOT_AVAILABLE"

	// CheckForOperatorUpdateOKBodyStatusUPDATEAVAILABLEBUTNOTCOMPATIBLE captures enum value "UPDATE_AVAILABLE_BUT_NOT_COMPATIBLE"
	CheckForOperatorUpdateOKBodyStatusUPDATEAVAILABLEBUTNOTCOMPATIBLE string = "UPDATE_AVAILABLE_BUT_NOT_COMPATIBLE"
)

// prop value enum
func (o *CheckForOperatorUpdateOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, checkForOperatorUpdateOkBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CheckForOperatorUpdateOKBody) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("checkForOperatorUpdateOk"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckForOperatorUpdateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckForOperatorUpdateOKBody) UnmarshalBinary(b []byte) error {
	var res CheckForOperatorUpdateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
